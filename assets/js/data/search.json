[ { "title": "github.io에서 velog로 블로그 이사합니다.", "url": "/posts/move-blog-to-velog/", "categories": "project, github.io", "tags": "github.io", "date": "2021-01-30 20:11:00 +0900", "snippet": "블로그 이사합니다!github.io에서 velog로 블로그 이사합니다- change blog platform" }, { "title": "webpack-html과 scss 그리고 code spliting 적용하기", "url": "/posts/webpackConfig-html_scss/", "categories": "webpack, html", "tags": "webpack", "date": "2021-01-20 20:11:00 +0900", "snippet": "webpack으로 scss와 code spliting, 이미지 가져오기를 적용해보았다.가장 문제가 되었던 것이 webpack-dev-server와 build한 파일의 publicPath가 일치하지 않은 것이었다.production mode일 때, publicPath에 파일들이 위치할 서버 상의 경로를 넣어주면 빌드 시에는 번들한 파일 이름 앞에 해당 설정값이 포함되어 html에 script 태그로 자동 입력된다.나의 경우 로컬의 파일구조 /webpack/dist/를 설정값에 적어주면 html에 /webpack/dist/(번들된..." }, { "title": "Algorithm-삽입 정렬", "url": "/posts/insertSort/", "categories": "algorithm, tutorial", "tags": "algorithm", "date": "2021-01-18 21:11:00 +0900", "snippet": "zeroCho blog: 삽입 정렬의 예시를 공부하며 쓴 블로그 글입니다.삽입 정렬은 첫 숫자는 놔두고, 두 번째 자리 숫자부터 뽑아서 그 숫자가 첫 숫자보다 크면 첫 숫자 오른쪽에, 작으면 왼쪽에 넣는다. 이러한 과정을 반복해 숫자를 오름차순으로 정렬한다.const insertionSort = function (array) { let i = 1, j, temp; for (i; i &amp;lt; array.length; i++) { temp = array[i]; for (j = i - 1; j &am..." }, { "title": "고차함수 응용하기, add(2, 3)와 add(2)(3)", "url": "/posts/higerOrder_function_exam/", "categories": "project, resolution", "tags": "project", "date": "2021-01-17 17:11:00 +0900", "snippet": "add(2, 3)와 add(2)(3)값이 모두 5가 나올 수 있는 함수를 만드는 방법이다.고차함수를 이용하면 이 문제를 해결할 수 있다.function add(a) { return function (b) { return a + b; };}또는;const add = (a) =&amp;gt; (b) =&amp;gt; a + b;add(2)(3); // 5function add(a, b) { const isB = function (b) { return a + b; }; if (typeof b == &#39;und..." }, { "title": "daon 동영상 로딩 오류 문제 해결하기", "url": "/posts/service-worker/", "categories": "project, resolution", "tags": "project", "date": "2021-01-16 23:11:00 +0900", "snippet": "1. 문제상황: video 로딩중 service worker에 에러 발생&amp;lt;video controls autoplay loop muted&amp;gt; &amp;lt;source src=&quot;img/main/water.mp4&quot; type=&quot;video/mp4&quot; /&amp;gt;&amp;lt;/video&amp;gt;다음과 같은 동영상 파일을 로드하는 과정에서 아래와 같은 오류가 발생했다. sw.js:1 Uncaught (in promise) TypeError: Failed to exe..." }, { "title": "NodeJS와 NPM", "url": "/posts/nodejs/", "categories": "node, concept", "tags": "node", "date": "2021-01-16 00:46:00 +0900", "snippet": "자바스크립트가 동작하는 환경에는 크게 ‘브라우저(chrome, IE, firefox 등)’와 ‘운영체제(Windows, Mac, Linux 등)’라는 2곳이 있다. 기본적으로 프론트엔드 개발자는 자바스크립트로 홈페이지가 열리는 브라우저에서 동작하는 기능을 만든다. 그런데 그 홈페이지 개발은 프론트엔드 개발자의 컴퓨터에서 한다. 자바스크립트로 프론트엔드 개발자의 컴퓨터를 제어할 수 있는 환경이 NodeJS이다. 그래서 NodeJS를 ‘런타임 환경’이라고도 한다.자바스크립트는 기존 브라우저에서도 지원을 하는 거지만, Node.js..." }, { "title": "callback과 promise 그리고 async/await", "url": "/posts/callback_promise_async_await/", "categories": "html, concept", "tags": "html", "date": "2021-01-14 13:46:00 +0900", "snippet": "1. callback 함수콜백 함수는 나중에 호출할 함수를 의미하며 비동기 동작을 처리하기 위해 쓰인다.function loadScript(src, callback) { let script = document.createElement(&#39;script&#39;); script.src = src; script.onload = () =&amp;gt; callback(script); script.onerroror = () =&amp;gt; callback(new Erroror(`${src}를 불러오는 도중에 에러가 ..." }, { "title": "브라우저 작동원리와 성능 최적화", "url": "/posts/browser_optimize_performance/", "categories": "html, concept", "tags": "html", "date": "2021-01-13 13:46:00 +0900", "snippet": "프런트엔드 성능 최적화라는 동영상을 보며 브라우저에서 로딩과 렌더링 최적화가 얼마나 중요한지에 대한 설명을 듣던 중 DOMContentLoaded, virtual DOM, 런타임과 빌드타임, SSR 등등 실제 프로젝트를 하며 많이 들었던 개념들이 나왔다. 이런 개념들이 아직 애매하게 다가와 동영상의 내용을 정리하며 다시 집어보기로 한다.우선 브라우저의 동작원리를 간단하게 설명하자면 브라우저의 렌더링 엔진은 다음의 과정을 걸쳐 화면에 사용자가 요청한 정보를 그리게 된다. HTML 파싱 후 DOM 트리(DOM Tree) 만들기 ..." }, { "title": "React 프로젝트에 SWR사용하기", "url": "/posts/swr/", "categories": "project, resolution", "tags": "project", "date": "2021-01-12 19:46:00 +0900", "snippet": "SWR(stale-while-revalidate)은 클라이언트 서버에서 data를 가져오는 기능(fetching)을 편리하게 사용할 수 있도록 도와주는 hook이다. 백서버에서 GET요청을 하고 결과를 받아올 때 간편하게 쓸 수 있어 react프로젝트를 할 때 사용했다.redux의 reducer나 saga로 만들면 코드량이 길어질 것을 짧은 코드로 사용할 수 있다. next팀이 만들어 nextjs와 호환이 잘 된다. SWR은 클라이언트 서버에서만 사용할 수 있어서 POST, PATCH, DELETE 등 데이터베이스의 데이터를 ..." }, { "title": "daon 프로젝트에 eslint와 prettier 적용하기", "url": "/posts/prettier/", "categories": "diary, project", "tags": "diary", "date": "2021-01-11 22:18:00 +0900", "snippet": "daon 홈페이지 리뉴얼 프로젝트는 처음 html, css, javascript를 배우면서 진행했다. 그 당시에는 html의 각 테크 class명이나 js의 변수명을 후에 누가 봐도 유지보수할 수 있도록 해당 기능을 잘 설명할 수 있는 이름으로 지어주는 것이 얼마나 중요한지 모르고 지나갔다. git에 commit message를 작성할 때도 어떤 기능이 바뀌었는지를 적어놓아야 나중에 문제가 생겼을 때 당시 commit으로 되돌아가는데 어려움이 없고, 협업 시에는 팀원과의 소통에소 중요한 역할을 할 수 있다. 과거의 나에게 이런..." }, { "title": "ymillonga-map 프로젝트 모듈시스템 적용하기", "url": "/posts/module-bundling/", "categories": "project, resolution", "tags": "webpack", "date": "2021-01-09 20:58:00 +0900", "snippet": "현재 active.js와 map.js 두 개의 파일로 나누어진 두 파일이 공통으로 사용하는 함수를 모듈로 만들어 재사용성을 높이고 무엇보다 코드량을 줄여 가독성을 높이기 위해 모듈시스템을 적용하기로 했다.1. webpack 설정하기 여러 modules로 쪼개진 js파일들을 합치기 위해 webpack으로 bundling해줄 필요가 있어서 다음과 같이 webpack설정을 했다.webpack.config.jsconst webpack = require(&#39;webpack&#39;);const path = require(&#39;p..." }, { "title": "cors 에러 해결하기", "url": "/posts/cors-error/", "categories": "project, error", "tags": "project", "date": "2021-01-07 12:58:00 +0900", "snippet": "1. CORS errorCORS error는 브라우저에서 다른 도메인(서버)으로 요청을 보낼 때 이것이 브라우저 보안에 위협이 될 수 있다고 판단한 브라우저가 브라우저 보안정책에 따라 해당 요청이 보안에 위협이 될 수 있다고 보내는 에러이다. 백엔드와 프론트엔드의 도메인 주소가 다른 경우 이런 문제가 발생할 수 있다.여기서 포인트는 &#39;이를 해결하려면 요청을 보낸 브라우저가 아닌 요청을 받는 back서버 쪽에서 &#39;Access-Control-Allow-Origin&#39; header를 설정해주어야 한다&#39;는 ..." }, { "title": "non-boolean attribute warning와 css prop 사용하기", "url": "/posts/non-boolean_attribute/", "categories": "project, resolution", "tags": "project", "date": "2021-01-06 12:18:00 +0900", "snippet": "1. non-boolean attribute warning Warning: Received false for a non-boolean attribute prefetch. If you want to write it to the DOM, pass a string instead: prefetch=”false” or prefetch={value.toString()}. If you used to conditionally omit it with prefetch={condition &amp;amp;&amp;amp; value}..." }, { "title": "localStorage와 sessionStorage 그리고 cookie", "url": "/posts/HTML5_storage/", "categories": "html, concept", "tags": "html", "date": "2021-01-05 14:43:00 +0900", "snippet": "1. cookie 서버와 클라이언트 간의 지속적인 데이터 교환을 위해 만들어졌다. 쿠키는 브라우저가 서버로 HTTP 요청을 보낼 때 서버에 누가 요청을 보냈는지를 알려준다. 그래서 서버가 브라우저에서 보낸 요청에 대한 응답을 다시 보낼 곳을 알려준다. 4kb 용량 제한을 가진다. 쿠키가 용량이 크면 매번 왔다갔다 하므로 서버 트래픽을 많이 낭비될 수 있다.2. localStorage와 sessionStorage 브라우저에서 쿠키를 사용하는 것보다 훨씬 직관적으로 key/value 데이터를 안전하게 저장할 수 있는 메커니..." }, { "title": "Node 모듈 시스템과 ES6 모듈 시스템", "url": "/posts/es6_module_system/", "categories": "javascript, ES6", "tags": "javascript", "date": "2021-01-04 21:55:00 +0900", "snippet": "모듈 시스템코딩을 하다보면 한 파일의 길이가 길어질 수 있는데 이를 여러 파일로 쪼개서 관리하면 가독성도 높이고 재사용성도 얻을 수 있다. 모듈 시스템은 해당 웹페이지에 필요한 리소스 파일들을 관리하고, 현재 파일이 어떤 패키지를 필요로 하는지 보여주는 의존성을 관리하기 위해 도입되었다.모듈은 export 방식의 차이에 따라 다르게 import해주어야 한다.(1) Node 모듈 시스템Node 모듈 시스템은 common.js방식을 쓴다.file1.jsexports.apple = &#39;red&#39;;exports.banana..." }, { "title": "antd-icon 용량 줄이기", "url": "/posts/antd_icon-tree_shaking/", "categories": "project, resolution", "tags": "project", "date": "2021-01-03 13:18:00 +0900", "snippet": "1. EC2 서버에서 JavaScript heap out of memory 문제 발생AWS에 배포하는 과정에서 용량 때문에 heap이 터지는 문제가 발생했다. FATAL ERROR: MarkCompactCollector: young object promotion failed Allocation failed - JavaScript heap out of memory아무래도 front 용량이 크기때문인 것 같아 확인해보니 antd-icon에서 많은 용량을 차지하고 있었다.2. 해결방법(1) antd-icon tree shaking..." }, { "title": "programmers_Level1_javascript - 카카오 실패율", "url": "/posts/algorithm_level1-failRatio/", "categories": "algorithm, Level1", "tags": "algorithm", "date": "2020-12-28 20:24:00 +0900", "snippet": "프로그래머스에서 문제 확인하기1. filter를 이용해 각 단계의 실패율을 배열 arr에 담아준다function solution(N, stages) { let totalNum = stages.length; let arr = []; for (let i = 1; i &amp;lt;= N; i++) { let stageNum = stages.filter(e =&amp;gt; e === i).length; let failRatio = 0; if (stageNum === 0) { ..." }, { "title": "programmers_Level1_javascript - 카카오 크레인 인형뽑기", "url": "/posts/algorithm_level1-craneDoll/", "categories": "algorithm, Level1", "tags": "algorithm", "date": "2020-12-27 19:06:00 +0900", "snippet": "프로그래머스에서 문제 확인하기1. board에서 선택된 인형들을 result 배열에 담기count = 0 이면 board의 첫번째 열의 값들을 b[m - 1]로 찾을 수 있다.b[m - 1] = 0,0,0,4,3result에 0이 아닌 값을 가진 첫번째 인형 [4] 가 담기면b[m - 1] = 0로 board에서 선택된 인형의 값 [4]를 [0]으로 만들어준다. [ [ 0, 0, 0, 0, 0 ], [ 0, 0, 1, 0, 3 ], [ 0, 2, 5, 0, 1 ], [ 4, 2, 4, 4, 2 ], [ 3, 5, 1..." }, { "title": "javascript - 객체의 복사(copy object)", "url": "/posts/copy-object/", "categories": "javascript, syntax", "tags": "javascript", "date": "2020-12-26 21:40:00 +0900", "snippet": " 이 글은 zerocho blog: 객체의 복사 의 내용을 정리하며 복습하기위해 작성되었습니다.1. 문자열, 숫자, 불린의 경우 값이 바로 복사된다.let string = &#39;string&#39;;let copy = string;console.log(copy); // &#39;string&#39;copy = &#39;str&#39;;console.log(string); // &#39;string&#39;copy를 바꾼다고 string까지 바뀌지 않는다.2. 배열, 일반 객체, 함수는 참조(reference)를 복사한다...." }, { "title": "_config.yml 에러 해결하기", "url": "/posts/config.yml_error/", "categories": "diary, github.io", "tags": "github.io", "date": "2020-12-24 23:43:00 +0900", "snippet": "cotes2020/jekyll-theme-chirpy에 포스팅을 하는 중github ACTION tab에서 자꾸 page build error가 발생했다.jekyll-theme-chirpy 설명서를 보면 배포할 때 master branch로 push하면 자동으로 gh-pages가 생성될 것이라 나오는데 나의 경우 _config.yml파일에 문제가 있어서 계속 배포가 되지 않고 있었다.#### Deploy on GitHub PagesFor security reasons, GitHub Pages build runs on `safe..." }, { "title": "facebook OAuth redirect url 설정하기", "url": "/posts/facebook_login/", "categories": "project, api", "tags": "api", "date": "2020-12-19 23:08:00 +0900", "snippet": "0. Facebook for Developers에 접속해 내 앱 만들기Facebook for Developers에 접속해서 ‘내 앱’을 이미 만들었다는 가정 아래 시작합니다!1. 앱 도메인에 OAuth로 로그인 요청을 보낼 url 주소를 입력하기내 앱 &amp;gt; 설정 &amp;gt; 기본 설정으로 들어가 ‘앱 도메인’과 그 밖의 정보를 입력해준다.앱 도메인ymillonga.xyz개인정보처리방침 URLhttps://ymillonga.xyz/?mode=privacy서비스 약관 URLhttps://ymillonga.xyz/?m..." }, { "title": "passportjs를 이용한 google OAuth 로그인 기능 구현하기", "url": "/posts/google_login/", "categories": "project, api", "tags": "api", "date": "2020-12-17 17:08:00 +0900", "snippet": "0. 구글 API console에 접속해 OAuth 클라이언트 ID를 만들기구글 API console에 접속해서 사용자 인증 정보 만들기 &amp;gt;OAuth 클라이언트 ID를 만든다.1. frontend 서버에서 요청을 보낼 버튼 만들기백엔드 서버 /user/google 주소로 GET요청을 보내도록 버튼을 만듭니다.예를 들면 http://localhost:3051/user/googlecomponents&amp;gt;GoogleLoginBtn.jsimport React, { useCallback } from &#39;rea..." }, { "title": "mysql timezone 수정하기", "url": "/posts/mysql_timezone/", "categories": "project, resolution", "tags": "project", "date": "2020-12-16 17:08:00 +0900", "snippet": "1. mysql shell을 실행한다.저는 MySQL 8.0 Command Line Client - Unicode 을 실행했습니다.2. mysql&amp;gt; select @@global.time_zone, @@session.time_zone; 명령을 실행한다.mysql&amp;gt; select @@global.time_zone, @@session.time_zone;+--------------------+---------------------+| @@global.time_zone | @@session.time_zone |+..." }, { "title": "react와 nextjs를 쓰는 이유", "url": "/posts/react_nextjs/", "categories": "diary, project", "tags": "diary", "date": "2020-12-10 05:00:00 +0900", "snippet": "페이지가 index, error뿐인 포트폴리오를 만드는데 nextjs를 굳이 사용해야 할까?데이터를 서버에서 받아오는 것도 아니고 화면만 렌더링하면 되는데 굳이 오랜 시간 걸리며 react와 nextjs로 포트폴리오를 만들어야 하는 이유가 뭘까?이런 질문이 포트폴리오는 만드는 내내 따라다닌다.5일동안 react-full-page package를 적용해 스크롤링하는데 하루, animation 효과 적용하는데 하루, next.config.js로 css와 less 동시에 적용하는 방법 찾는데 하루… 이런 식으로 그냥 vanillaj..." }, { "title": "react-full-page 패키지 controls customize하기", "url": "/posts/react-full-page/", "categories": "react, project", "tags": "react", "date": "2020-12-07 23:06:00 +0900", "snippet": "1. &amp;lt;FullPage&amp;gt; 컴포넌트에 controls값으로 CustomControls 컴포넌트를 넣어준다. controls={CustomControls}2. react-full-page에서 제공하는 Basic controls props인 getCurrentSlideIndex, scrollToSlide를 인자로 받아온다.3. 선택된 메뉴의 index라 할 수 있는 key( selectedKeys)를 getCurrentSlideIndex와 연결해 Menu를 클릭하면 해당 &amp;lt;Slide&amp;g..." }, { "title": "React Hooks - useMemo()", "url": "/posts/useMemo/", "categories": "react, tutorial", "tags": "react", "date": "2020-12-01 12:08:00 +0900", "snippet": "Hooks는 전체 component가 재실행된다useCallback은 함수 자체를 캐싱하고, useMemo는 값을 캐싱한다. useRef는 일반 값을 기억한다면, useMemo는 복잡한 함수 return 값을 기억한다.useCallback(() =&amp;gt; {}, []);useMemo(() =&amp;gt; 값, []);useCallback은 함수를 새로 만들지 않고 () =&amp;gt; {} 자체를 캐싱하는 것이고, useMemo는 값만 캐싱한다. 자식 component에 prop로 함수를 넘길 때(onClick)..." }, { "title": "SequelizeUniqueConstraintError", "url": "/posts/SequelizeUniqueConstraintError/", "categories": "project, error", "tags": "error", "date": "2020-11-29 20:05:00 +0900", "snippet": " 다음은 프론트 서버에서 saga로 fork를 두번 했을 때 발생하는 에러입니다.문제상황:백서버 Sequelize에서 자꾸 유일해야하는 key값이 ‘follow.PRIMARY’: ‘2-1’와 같이 중복된다고 나와서 당황했다.UniqueConstraintError [SequelizeUniqueConstraintError]: Validation error at Query.formatError (C:\\Users\\HOME\\Documents\\ymillonga\\back\\node_modules\\sequelize\\lib\\dialect..." }, { "title": "REST API를 쓰는 이유", "url": "/posts/REST-API/", "categories": "node, tutorial", "tags": "node", "date": "2020-11-26 01:53:00 +0900", "snippet": "ymillonga-sns라는 풀스택 프로젝트를 만들 때 백엔드 서버를 만들면서 가장 헷갈렸던 부분이프론트에서 axios로 요청을 보낼 때 어떤 메소드(get, post, patch, delete)로 보내야 하는지, 백엔드 서버에서는 그 요청을 받아 어떤 데이터를 보내주는지였다.예를 들어 프론트 서버에서 로그인 요청을 보낼 때 post 메소드를 쓰는 것이 그랬다.비밀번호가 들어가기 때문에 get처럼 url에 데이터값이 노출되는 메소드는 안되고그렇다고 patch,put처럼 데이터값을 바꿔주는 것도 아니니 post를 쓰는 것이다.f..." }, { "title": "REACT JSX속성", "url": "/posts/JSX/", "categories": "react, tutorial", "tags": "react", "date": "2020-11-25 17:53:00 +0900", "snippet": "처음 리엑트로 css를 코드할 때 jsx가 굉장히 어색했었다. 이번 기회에 확실히 집고 넘어가고 싶어서 자료를 찾던 중 잘 설명된 글을 찾았다~~REACT JSX는자바스크립트 객체를 변수에 저장하거나 중괄호를 이중으로 작성하여() 인라인으로 작성할 수도 있다.&amp;lt;Button style= /&amp;gt;이중 중괄호를 잘 살펴보면 바깥쪽의 중괄호는 JSX에서 사용되었고,안쪽의 중괄호는 자바스크립트의 객체 리터럴을 작성하기 위해 사용되었다.자세한 내용은 react 교과서를 참고해주세요~ 출처: REACT JSX속성" }, { "title": "scroll 속성 집고 넘어가기!", "url": "/posts/scroll_properties/", "categories": "javascript, syntax", "tags": "javascript", "date": "2020-11-23 23:33:00 +0900", "snippet": "프로젝트에서 react로 infinite scrolling을 구현할 때 document와 window의 scroll 값을 구하는 window properties인 scrollY와 Element properties인 clientHeight, scrollHeight의 차이가 헷갈려서 정리해본다. useEffect(() =&amp;gt; { function onScroll() { if (window.scrollY + document.documentElement.clientHeight &amp;gt;..." }, { "title": "일치연산자(===)와 동등연산자(==)", "url": "/posts/strict-equality,strict-non-equality/", "categories": "javascript, syntax", "tags": "javascript", "date": "2020-11-23 19:28:00 +0900", "snippet": "1. 일치 연산자 ===를 사용하여 null과 undefined를 비교하면두 값의 자료형이 다르기 때문에 일치 비교 시 거짓이 반환됩니다.alert(null === undefined); // false2. 동등 연산자 ==를 사용하여 null과 undefined를 비교하면동등 연산자를 사용해 null과 undefined를 비교하면 특별한 규칙이 적용돼 true가 반환됩니다. 두 값은 자기들끼리는 잘 어울리지만 다른 값들과는 잘 어울리지 못하죠.alert(null == undefined); // true출처: 모던 javascr..." }, { "title": "React Hooks - useRef()", "url": "/posts/useRef/", "categories": "react, tutorial", "tags": "react", "date": "2020-11-19 19:46:00 +0900", "snippet": "zeroCho님의 nodebird강좌를 복습하는 중 imageInput과 postInput에서 왜 useRef()를 사용하는지 궁금해졌다const PostForm = ({ post }) =&amp;gt; { const imageInput = useRef(); const postInput = useRef(); const onClickImageUpload = useCallback(() =&amp;gt; { imageInput.current.click(); }, [imageInput.curren..." }, { "title": "React Hooks - useEffect()", "url": "/posts/useEffect/", "categories": "react, tutorial", "tags": "react", "date": "2020-11-19 19:46:00 +0900", "snippet": "# [1] Mount: 컴포넌트가 처음 실행될 때 컴포넌트가 시작되면 우선 context, defaultProps와 state를 저장합니다. 그 후에 componentWillMount 메소드를 호출합니다. 그리고 render로 컴포넌트를 DOM에 부착한 후 Mount가 완료된 후 componentDidMount가 호출됩니다. [2] props가 업데이트될 때 업데이트되기 전에 업데이트가 발생하였음을 감지하고, componentWillReceiveProps 메소드가 호출됩니다. 그 후 shouldComponen..." }, { "title": "javascript - Object Model", "url": "/posts/object_model/", "categories": "javascript, syntax", "tags": "javascript", "date": "2020-11-19 17:08:00 +0900", "snippet": "window : 브라우저의 요소들과 자바스크립트 엔진, 그리고 모든 변수를 담고 있는 객체 브라우저 전체를 담당하는 게 Window 객체이고, 웹사이트만 담당하는게 Document 객체 Window 객체가 창을 의미한다면 Document 객체는 윈도우에 로드된 문서 (ex: chrome browser가 window객체, document는 보여지는 각각의 탭-‘네이버 지식인 탭’, ‘react api reference 탭’ 등등)BOM(Browser Object Model): document는 뺀 나머지 브라우저에 대한 정보..." }, { "title": "programmers_Level1_javascript 네 번째", "url": "/posts/algorithm_level1-4/", "categories": "algorithm, Level1", "tags": "algorithm", "date": "2020-11-17 20:06:00 +0900", "snippet": "프로그래머스에서 문제 확인하기31. 약수의 합//sol1function solution(n) { console.log(Array(Math.floor(n / 2)).fill().map((v, i) =&amp;gt; i + 1).reduce((s, c) =&amp;gt; n % c ? s : s + c) + n);}//sol2function solution(n) { console.log(Array(n).fill().map((v, i) =&amp;gt; i + 1).reduce((s, c) =&amp;gt; n % c ?..." }, { "title": "href란 무엇인가", "url": "/posts/href/", "categories": "html, syntax", "tags": "html", "date": "2020-11-14 19:54:00 +0900", "snippet": "인터넷Internet : TCP/IP(Transmission Control Protocol/Internet Protocol)라는 통신 프로토콜을 이용해 정보를 주고받는 컴퓨터 네트워크웹www : 인터넷에 연결된 컴퓨터를 통해 사람들이 정보를 공유할 수 있는 전 세계적인 정보 공간-전자메일과 같이 인터넷상에서 동작하는 하나의 서비스href: hypertext reference의 약자, 참조를 통해 독자가 한 문서에서 다른 문서로 즉시 접근할 수 있는 텍스트인 hypertext가 참조하는 링크, 태그의 속성 중 한가지" }, { "title": "programmers_Level1_javascript 세번째", "url": "/posts/algorithm_level1-3/", "categories": "algorithm, Level1", "tags": "algorithm", "date": "2020-11-12 20:06:00 +0900", "snippet": "함수가 자기 자신을 호출하는 재귀로 된 풀이방법을 보면 어떻게 이런 걸 생각해낼 수 있는지 놀랍다.21번 ‘최대공약수와 최소공배수’ 문제는 재귀함수가 바로 이런 것이란 것 알게 된 문제였다.level 1 정도까지는 다른 사람의 풀이를 참고하면서 공부하고 있지만 level 2부터는 알고리즘에 대한 기본 이론을 공부하고 도전해야겠다. ‘Hello 알고리즘’, ‘미래를 바꾼 아홉 가지 알고리즘’ 같은 책으로 기본적인 이론을 배워가고 있는 중이다.프로그래머스에서 문제 확인하기21. 최대공약수와 최소공배수//sol1function s..." }, { "title": "programmers_Level1_javascript 두번째", "url": "/posts/algorithm_level1-2/", "categories": "algorithm, Level1", "tags": "algorithm", "date": "2020-10-26 19:46:00 +0900", "snippet": "문자를 다룰 땐 역시 정규표현식이 가장 코드량이 짧고 효율적인 듯 하다. ‘배열은 편리하고 성능도 좋은 메소드를 많이 제공하므로 얼마나 많은 메소드를 알고 있냐가 프로그래밍의 효율성을 좌지우지한다’는 제로초님 말처럼 알고리즘 문제를 풀면서 배열 뿐 아니라 문자, 숫자와 관련된 다양한 메소드들을 찾아보고 여러 번 써보면서 익히는 시간이었다.프로그래머스에서 문제 확인하기11. 콜라츠 추측//sol1function solution(n, count = 0) { // let a = 0; // console.log(a++, +..." }, { "title": "programmers_Level1_javascript 첫번째", "url": "/posts/algorithm_level1-1/", "categories": "algorithm, Level1", "tags": "algorithm", "date": "2020-10-21 19:46:00 +0900", "snippet": "‘2020.10.21’ 부터 프로그래머스에 있는 알고리즘 연습문제를 풀기 시작했다.처음 일주일은 해답을 보지 않으면 2-3시간을 고민해도 안풀렸는데 조금씩 비슷한 풀이가 나오기 시작하자 혼자 힘으로 쉬운 문제는 풀리는 게 신기했다.내가 푼 방식과 함께 프로그래머스에 있던 다른 기발한 답들도 함께 기록한다.프로그래머스에서 문제 확인하기1. 2016년function solution(a, b) { const week = [&#39;SUN&#39;,&#39;MON&#39;,&#39;TUE&#39;,&#39;WED&#39;,&..." }, { "title": "eventBubbling 문제 해결하기", "url": "/posts/eventBubbling/", "categories": "project, resolution", "tags": "project", "date": "2020-10-16 19:56:00 +0900", "snippet": "검색결과 목록 드레그하기 &amp;lt;div class=&quot;slider&quot;&amp;gt; &amp;lt;div class=&quot;listbox&quot;&amp;gt; &amp;lt;ul class=&quot;items&quot;&amp;gt;&amp;lt;!-- &amp;lt;li class=&quot;item&quot; id=&quot;0&quot;&amp;gt;&amp;lt;/li&amp;gt; --&amp;gt; &..." }, { "title": "input의 onchange 그리고 match로 검색창 만들기", "url": "/posts/onChange_match/", "categories": "project, resolution", "tags": "project", "date": "2020-10-16 19:56:00 +0900", "snippet": "1. 구현순서 input창을 enter키를 누르는 것만으로 value값을 받는다. input값과 json data와 비교한다. input값이 해당 json data에 있을 때 지도 아래 리스트 목록으로 넣어준다. (ulEle에 결과값을 넣어주기) input값이 바뀌면 match로 얻은 값을 새로고침한다.2. &amp;lt;form&amp;gt; 테그 만들기먼저 html에 &amp;lt;form&amp;gt; 테그를 만들고 addEventListener로 submit 콜백함수를 불러온다. 이때 e.preventDefaul..." }, { "title": "시맨틱(Semantic)", "url": "/posts/semantic_html/", "categories": "html, concept", "tags": "html", "date": "2020-10-10 10:00:00 +0900", "snippet": "1. 웹표준웹 표준(Web Standards) 이란‘웹에서 표준적으로 사용되는 기술이나 규칙’으로 표준화 단체인 W3C가 권고한 표준안에 따라 웹사이트를 작성하는 것이다. 어떤 운영체제나 브라우저를 사용하더라도 웹페이지가 동일하게 보이고 정상 작동해야함을 의미한다.웹 표준의 기술로는 XHTML (eXtensible Hypertext Markup Language), CSS(Cascading Style Sheets), XML(eXtensible Markup Language), DOM(Document Object Model), EC..." }, { "title": "javascript - Hoisting과 Variable 변수 선언하기", "url": "/posts/variable/", "categories": "javascript, syntax", "tags": "javascript", "date": "2020-10-08 13:05:00 +0900", "snippet": "이 글은 zeroCho blog : ES2015(ES6) Const, Let의 내용을 복습하기위해 다시 정리한 것입니다.var let const의 차이는 무엇일까요?기존 var과의 가장 큰 차이점은, const와 let은 함수스코프를 따르지 않고 블록스코프를 따른다는 것입니다.함수 본문 내에서 var로 선언한 변수는 선언 위치와 상관없이 함수 본문이 시작되는 지점에서 정의되는데이렇게 변수가 끌어올려 지는 현상을 ‘호이스팅(hoisting)’이라고 부릅니다.if (true) { var test = true;}alert(tes..." }, { "title": "javascript - closure 클로저 이해하기", "url": "/posts/closure/", "categories": "javascript, syntax", "tags": "javascript", "date": "2020-10-06 21:55:00 +0900", "snippet": "1. 전역변수와 지역변수, 그리고 함수의 범위(scope)전역변수란 window 객체에 만든 변수로 함수 바깥에 만들어진다. 반대로 지역변수는 함수 안에 있는 변수를 일컫는다.let x = &#39;outside&#39;; //전역변수function inside() { let x = &#39;inside&#39;; //지역변수 x = &#39;scope&#39;;}inside();alert(x); // &#39;outside&#39;함수 안에서 선언된 변수는 해당 함수 안에서만 사용할 수 있다. 따라서 inside함수에서 ..." }, { "title": "nomadcoder쌤의 react로 Movie web service 만들기", "url": "/posts/vector/", "categories": "diary, tutorial", "tags": "tutorial", "date": "2020-10-04 21:55:00 +0900", "snippet": "Movie web service 만들기 ch.6 routing까지 완주했다오류 안내고 따라간 것만 해도 내 자신이 예뻤다``(벡터)와 ‘‘(작은따옴표)의 차이를 몰라 마지막에 고생했지만 결국 스스로 오류 풀어냈다그래서 인지 React Native로 날씨앱 만들기 course가 더 어려운 코스인데도 어제보다 수월하게 해내고 있다. 오늘은 중간마다 쉬는 것도 자주했긴 했다.그런데 중간에 쉬면서 산책을 하다 문득 이런 생각이 들었다.coding은 컴퓨터가 알아들을 수 있는 알맞은 문법을 아느냐의 문제라는 것,내가 그 문법을 잘 알고..." }, { "title": "javascript - preventDefault와 이벤트 객체", "url": "/posts/default/", "categories": "javascript, syntax", "tags": "javascript", "date": "2020-10-03 21:55:00 +0900", "snippet": "ReactJS로 영화 웹 서비스 만들기 ch.3~ ch.5까지 하루종일 본 기분!7시간 반 정도 걸린 것 같은데 마지막엔 정말 머리가 혼미했다.오늘 새로 알게 된 개념은 DefaultDefault란,컴퓨터 기술분야에서 말하는 디폴트란 어떤 값이나 설정치 등이 프로그램 사용자에 의해 지정되지 않았을 때, 컴퓨터 프로그램은 미리 정해져있는 값이나 설정치 등을 사용하게 되는데, 이를 디폴트라고 한다.나중에 알고 보니 자바스크립트를 하면서 이벤트 객체를 다룰 때 preventDefault를 가장 많이 마주쳤다.이벤트 객체란, DOM..." }, { "title": "ES6문법 개요와 Babel", "url": "/posts/es6_syntax_list/", "categories": "javascript, ES6", "tags": "javascript", "date": "2020-10-01 21:55:00 +0900", "snippet": "ES6란, ES6는 EcmaScript6의 준말로 뒷의 숫자는 자바스크립트의 버전을 뜻한다. ECMA 라는 단체에서 기존의 결점을 보완한 표준 자바스크립트 버전을 매년 발표한다. ES2015(ES6)는 기존 자바스크립트 ES2014(ES5)에 비해 많은 부분이 달라졌는데 대표적으로 다음과 같다. 참고로 ES2015와 같이 ES뒤에 년도를 붙이는 것이 공식명칭이다. const(constant, 상수)와 let Object(객체) 코드량 화살표 함수 default, rest, spread 템플릿 문자열, Tagged T..." }, { "title": "markdown local img url 경로 설정방법", "url": "/posts/markdown_img/", "categories": "diary, github.io", "tags": "github.io", "date": "2020-09-30 23:55:00 +0900", "snippet": "‘_config.yml’ file에 profile 이미지 경로에서 힌트를 얻어 로컬저장소에서 이미지 경로 url를 설정하는 법을 알아냈다 ‘/assets/img/sample/avatar.jpg’알고 보니 내가 선택한 jekyll-theme-chirpy에도 이미지 포스팅하는 법이 자세히 나와 있었다~ImagesPreview imageIf you want to add an image to the top of the post contents, specify the url for the image by:---image: /path/..." }, { "title": "깃허브 블로그 github.io Blog 만들기", "url": "/posts/first-blog/", "categories": "diary, github.io", "tags": "github.io", "date": "2020-09-30 21:55:00 +0900", "snippet": "오늘부터 깃허브 블로그를 시작하기로 했다. 우선 git에 repository를 만들고 jekyll에서 마음에 드는 theme을 선택한다. 문제는 ruby를 설치하고 jekyll server를 실행하는데 tzinfo 에러와 sass가 발생한 것ㅜㅠ우선 tzinfo 오류는http://callmejaden.github.io/github_pages/2019/12/30/GP-04-tzinfo이곳에서 하라는 대로 Gemfile에 들어가 해당명렁어를 붙여넣기했다~# Windows does not include zoneinfo files..." }, { "title": "programming 독학시작하기", "url": "/posts/programming/", "categories": "diary, github.io", "tags": "diary", "date": "2019-10-02 21:55:00 +0900", "snippet": "지금 알겠는 건 할 게 너무 많다는 것이다nomadcoders에서 react 수업 state에 진입했으나javascript의 class를 그곳에서 처음 보고 생활코딩 객체지향 프로그래밍을 듣기로 한다국비지원으로 학원에서 공부하는 것을 따라가는 것으로는 기껏해야 좋지 않은 SI업체에 들어갈 수밖에 없다는 현실을 알게 된지 3일이다.점점 자신을 잃어간다. 나에게 코딩이 맞는 건지 확신이 안서는데 해야할 게 산처럼 싸여있는 기분이랄까…어제 egoing님이 생활코딩을 시작한지 2개월째에 한 인터뷰를 보았다.opensource에 관심..." } ]
