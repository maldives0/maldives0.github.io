Page
     Size     First Load JS
┌ λ /
     2.94 kB        1.19 MB
├   /_app
     0 B             532 kB
├ ○ /404
     274 B           532 kB
├ λ /hashtag/[tag]
     808 B          1.18 MB
├ λ /login
     8.85 kB        1.17 MB
├ λ /post/[id]
     714 B          1.18 MB
├ λ /posts/related
     2.67 kB        1.18 MB
├ λ /profile
     7.78 kB        1.17 MB
├ λ /signup
     1.33 kB        1.17 MB
└ λ /user/[id]
     1.28 kB        1.18 MB
+ First Load JS shared by all
     532 kB
  ├ chunks/033f869c0cc364627d93bd7d05534baade1e7634.68b4d0.js  4.92 kB
  ├ chunks/6b7903cd2497917111f687055581f790035a2aa9.5aa3b1.js  15.6 kB
  ├ chunks/777c2cca.558465.js
     77 B
  ├ chunks/a48d0dfd1ba72b4ca1f15f44979b0d2398b47bf8.0786c6.js  428 kB
  ├ chunks/b6451bfa71415e1eb6b699247070fee6c4d97f38.fee3f6.js  11.5 kB
  ├ chunks/commons.7aac71.js
     8.79 kB
  ├ chunks/framework.9d2e16.js
     42.1 kB
  ├ chunks/main.5b6e30.js
     7.06 kB
  ├ chunks/pages/_app.e4826c.js
     13 kB
  ├ chunks/styles.f4dce8.js
     99 B
  ├ chunks/webpack.470e21.js
     752 B
  └ css/777c2cca.81a3d2c1.chunk.css
     65.7 kB

λ  (Server)  server-side renders at runtime (uses getInitialProps or getServerSideProps)
○  (Static)  automatically rendered as static HTML (uses no initial props)
●  (SSG)     automatically generated as static HTML + JSON (uses getStaticProps)        
   (ISR)     incremental static regeneration (uses revalidate in getStaticProps)        

[==  ] info  - Generating static pages (0/1)


ubuntu@ip-172-31-45-132:~/ymillonga-sns/front$ npm run build   

> front@1.0.0 build /home/ubuntu/ymillonga-sns/front
> cross-env ANALYZE=true NODE_ENV=true next build

warn  - You are using a non-standard "NODE_ENV" value in your environment. This creates inconsistencies in the project and is 
strongly advised against. Read more: https://err.sh/next.js/non-standard-node-env
Warning: Built-in CSS support is being disabled due to custom CSS configuration being detected.
See here for more info: https://err.sh/next.js/built-in-css-disabled

info  - Using external babel configuration from /home/ubuntu/ymillonga-sns/front/.babelrc
Webpack Bundle Analyzer saved report to /home/ubuntu/ymillonga-sns/front/.next/analyze/server.html
info  - Creating an optimized production build ..
<--- Last few GCs --->

[17547:0x630efc0]    20581 ms: Scavenge 477.9 (490.8) -> 477.4 
(490.8) MB, 16.3 / 0.0 ms  (average mu = 0.604, current mu = 0.531) allocation failure
[17547:0x630efc0]    20601 ms: Scavenge 478.8 (494.8) -> 478.3 
(494.8) MB, 17.0 / 0.0 ms  (average mu = 0.604, current mu = 0.531) allocation failure
[17547:0x630efc0]    21501 ms: Mark-sweep 481.5 (494.8) -> 477.8 (497.3) MB, 866.5 / 0.0 ms  (average mu = 0.393, current mu = 0.116) allocation failure scavenge might not succeed


<--- JS stacktrace --->

FATAL ERROR: MarkCompactCollector: young object promotion failed Allocation failed - JavaScript heap out of memory
 1: 0xa04200 node::Abort() [node]
 2: 0x94e4e9 node::FatalError(char const*, char const*) [node] 
 3: 0xb7860e v8::Utils::ReportOOMFailure(v8::internal::Isolate*, char const*, bool) [node]
 4: 0xb78987 v8::internal::V8::FatalProcessOutOfMemory(v8::internal::Isolate*, char const*, bool) [node]
 5: 0xd33215  [node]
 6: 0xd63dae v8::internal::EvacuateNewSpaceVisitor::Visit(v8::internal::HeapObject, int) [node]
 7: 0xd6fde6 v8::internal::FullEvacuator::RawEvacuatePage(v8::internal::MemoryChunk*, long*) [node]
 8: 0xd5bfcf v8::internal::Evacuator::EvacuatePage(v8::internal::MemoryChunk*) [node]
 9: 0xd5c248 v8::internal::PageEvacuationTask::RunInParallel(v8::internal::ItemParallelJob::Task::Runner) [node]
10: 0xd4eb29 v8::internal::ItemParallelJob::Run() [node]       
11: 0xd71d40 void v8::internal::MarkCompactCollectorBase::CreateAndExecuteEvacuationTasks<v8::internal::FullEvacuator, v8::internal::MarkCompactCollector>(v8::internal::MarkCompactCollector*, v8::internal::ItemParallelJob*, v8::internal::MigrationObserver*, long) [node]
12: 0xd725dc v8::internal::MarkCompactCollector::EvacuatePagesInParallel() [node]
13: 0xd727a5 v8::internal::MarkCompactCollector::Evacuate() [node]
14: 0xd84791 v8::internal::MarkCompactCollector::CollectGarbage() [node]
15: 0xd40ab8 v8::internal::Heap::MarkCompact() [node]
16: 0xd425a8 v8::internal::Heap::CollectGarbage(v8::internal::AllocationSpace, v8::internal::GarbageCollectionReason, v8::GCCallbackFlags) [node]
17: 0xd459ec v8::internal::Heap::AllocateRawWithRetryOrFailSlowPath(int, v8::internal::AllocationType, v8::internal::AllocationOrigin, v8::internal::AllocationAlignment) [node]
18: 0xd0b2f2 v8::internal::Factory::AllocateRaw(int, v8::internal::AllocationType, v8::internal::AllocationAlignment) [node]  
19: 0xd07542 v8::internal::FactoryBase<v8::internal::Factory>::AllocateRawArray(int, v8::internal::AllocationType) [node]     
20: 0xd075f4 v8::internal::FactoryBase<v8::internal::Factory>::NewFixedArrayWithFiller(v8::internal::Handle<v8::internal::Map>, int, v8::internal::Handle<v8::internal::Oddball>, v8::internal::AllocationType) [node]
21: 0xf3d8ce v8::internal::Handle<v8::internal::NameDictionary> v8::internal::HashTable<v8::internal::NameDictionary, v8::internal::NameDictionaryShape>::New<v8::internal::Isolate>(v8::internal::Isolate*, int, v8::internal::AllocationType, v8::internal::MinimumCapacity) [node]
22: 0xf3db26 v8::internal::Handle<v8::internal::NameDictionary> v8::internal::HashTable<v8::internal::NameDictionary, v8::internal::NameDictionaryShape>::EnsureCapacity<v8::internal::Isolate>(v8::internal::Isolate*, v8::internal::Handle<v8::internal::NameDictionary>, int, v8::internal::AllocationType) [node]      
23: 0xf3e33a v8::internal::Handle<v8::internal::NameDictionary> v8::internal::Dictionary<v8::internal::NameDictionary, v8::internal::NameDictionaryShape>::Add<v8::internal::Isolate>(v8::internal::Isolate*, v8::internal::Handle<v8::internal::NameDictionary>, v8::internal::Handle<v8::internal::Name>, v8::internal::Handle<v8::internal::Object>, v8::internal::PropertyDetails, v8::internal::InternalIndex*) [node]
24: 0xf49dba v8::internal::BaseNameDictionary<v8::internal::NameDictionary, v8::internal::NameDictionaryShape>::Add(v8::internal::Isolate*, v8::internal::Handle<v8::internal::NameDictionary>, v8::internal::Handle<v8::internal::Name>, v8::internal::Handle<v8::internal::Object>, v8::internal::PropertyDetails, v8::internal::InternalIndex*) [node]
25: 0x106f4ff v8::internal::Runtime_AddDictionaryProperty(int, 
unsigned long*, v8::internal::Isolate*) [node]
26: 0x1400039  [node]
npm ERR! code ELIFECYCLE
npm ERR! errno 1
npm ERR! front@1.0.0 build: `cross-env ANALYZE=true NODE_ENV=true next build`
npm ERR! Exit status 1
npm ERR!
npm ERR! Failed at the front@1.0.0 build script.
npm ERR! This is probably not a problem with npm. There is likely additional logging output above.

npm ERR! A complete log of this run can be found in:
npm ERR!     /home/ubuntu/.npm/_logs/2020-12-17T07_21_00_369Z-debug.log